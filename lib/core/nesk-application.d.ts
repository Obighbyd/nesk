/// <reference types="node" />
import * as http from 'http';
import { CanActivate, ExceptionFilter, NeskInterceptor, PipeTransform, WebSocketAdapter } from '@neskjs/common';
import { INeskApplication, INeskMicroservice } from '@neskjs/common';
import { MicroserviceConfiguration } from '@neskjs/common/interfaces/microservices/microservice-configuration.interface';
import { ApplicationConfig } from './application-config';
import { NeskContainer } from './injector/container';
import { NeskApplicationContext } from './nesk-application-context';
import { NeskApplicationOptions } from '@neskjs/common/interfaces/nesk-application-options.interface';
import { CorsOptions } from '@neskjs/common/interfaces/external/cors-options.interface';
export declare class NeskApplication extends NeskApplicationContext implements INeskApplication {
    private readonly koa;
    private readonly config;
    private readonly appOptions;
    private readonly logger;
    private readonly middlewaresModule;
    private readonly middlewaresContainer;
    private readonly microservicesModule;
    private readonly socketModule;
    private readonly httpServer;
    private readonly routesResolver;
    private readonly microservices;
    private isInitialized;
    constructor(container: NeskContainer, koa: any, config: ApplicationConfig, appOptions?: NeskApplicationOptions);
    applyOptions(): this;
    createServer(): any;
    setupModules(): Promise<void>;
    init(): Promise<this>;
    setupParserMiddlewares(): void;
    isMiddlewareApplied(app: any, ctor: any): boolean;
    setupRouter(): Promise<void>;
    connectMicroservice(config: MicroserviceConfiguration): INeskMicroservice;
    getMicroservices(): INeskMicroservice[];
    getHttpServer(): http.Server;
    startAllMicroservices(callback?: () => void): this;
    startAllMicroservicesAsync(): Promise<void>;
    use(...args: any[]): this;
    engine(...args: any[]): this;
    enableCors(options?: CorsOptions): this;
    listen(port: number | string, callback?: () => void): any;
    listen(port: number | string, hostname: string, callback?: () => void): any;
    listenAsync(port: number | string, hostname?: string): Promise<any>;
    close(): void;
    setGlobalPrefix(prefix: string): this;
    useWebSocketAdapter(adapter: WebSocketAdapter): this;
    useGlobalFilters(...filters: ExceptionFilter[]): this;
    useGlobalPipes(...pipes: PipeTransform<any>[]): this;
    useGlobalInterceptors(...interceptors: NeskInterceptor[]): this;
    useGlobalGuards(...guards: CanActivate[]): this;
    private setupMiddlewares(instance);
    private listenToPromise(microservice);
    private callInitHook();
    private callModuleInitHook(module);
    private hasOnModuleInitHook(instance);
    private callDestroyHook();
    private callModuleDestroyHook(module);
    private hasOnModuleDestroyHook(instance);
}
